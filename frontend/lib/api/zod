import { makeApi, Zodios, type ZodiosOptions } from "@zodios/core";
import { z } from "zod";

const SearchItem = z
  .object({
    image_url: z.union([z.string(), z.null()]),
    label: z.union([z.string(), z.null()]),
    payload: z.object({}).partial().passthrough(),
    score: z.union([z.number(), z.null()]).optional(),
  })
  .passthrough();
const ValidationError = z
  .object({
    loc: z.array(z.union([z.string(), z.number()])),
    msg: z.string(),
    type: z.string(),
  })
  .passthrough();
const HTTPValidationError = z
  .object({ detail: z.array(ValidationError) })
  .partial()
  .passthrough();
const Body_index_index_post = z
  .object({ files: z.array(z.instanceof(File)) })
  .passthrough();

export const schemas = {
  SearchItem,
  ValidationError,
  HTTPValidationError,
  Body_index_index_post,
};

const endpoints = makeApi([
  {
    method: "get",
    path: "/",
    alias: "root__get",
    requestFormat: "json",
    response: z.unknown(),
  },
  {
    method: "post",
    path: "/clear/all",
    alias: "clear_all_clear_all_post",
    requestFormat: "json",
    response: z.unknown(),
  },
  {
    method: "post",
    path: "/clear/minio",
    alias: "clear_minio_clear_minio_post",
    requestFormat: "json",
    response: z.unknown(),
  },
  {
    method: "post",
    path: "/clear/qdrant",
    alias: "clear_qdrant_clear_qdrant_post",
    requestFormat: "json",
    response: z.unknown(),
  },
  {
    method: "get",
    path: "/health",
    alias: "health_health_get",
    requestFormat: "json",
    response: z.unknown(),
  },
  {
    method: "post",
    path: "/index",
    alias: "index_index_post",
    requestFormat: "form-data",
    parameters: [
      {
        name: "body",
        type: "Body",
        schema: Body_index_index_post,
      },
    ],
    response: z.unknown(),
    errors: [
      {
        status: 422,
        description: `Validation Error`,
        schema: HTTPValidationError,
      },
    ],
  },
  {
    method: "get",
    path: "/search",
    alias: "search_search_get",
    requestFormat: "json",
    parameters: [
      {
        name: "q",
        type: "Query",
        schema: z.string(),
      },
      {
        name: "k",
        type: "Query",
        schema: z.number().int().gte(1).lte(50).optional().default(5),
      },
    ],
    response: z.array(SearchItem),
    errors: [
      {
        status: 422,
        description: `Validation Error`,
        schema: HTTPValidationError,
      },
    ],
  },
]);

export const api = new Zodios(endpoints);

export function createApiClient(baseUrl: string, options?: ZodiosOptions) {
  return new Zodios(baseUrl, endpoints, options);
}
