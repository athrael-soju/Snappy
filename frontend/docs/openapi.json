{
  "openapi": "3.1.0",
  "info": {
    "title": "Vision RAG API",
    "version": "1.0.0"
  },
  "paths": {
    "/": {
      "get": {
        "tags": [
          "meta"
        ],
        "summary": "Root",
        "operationId": "root__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "tags": [
          "meta"
        ],
        "summary": "Health",
        "operationId": "health_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/search": {
      "get": {
        "tags": [
          "retrieval"
        ],
        "summary": "Search",
        "operationId": "search_search_get",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "User query",
              "title": "Q"
            },
            "description": "User query"
          },
          {
            "name": "k",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer",
                  "maximum": 50,
                  "minimum": 1
                },
                {
                  "type": "null"
                }
              ],
              "title": "K"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchItem"
                  },
                  "title": "Response Search Search Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/index": {
      "post": {
        "tags": [
          "indexing"
        ],
        "summary": "Index",
        "description": "Upload and index files. Returns 202 Accepted with job_id.\nUse /sse/ingestion/{job_id} to track progress.",
        "operationId": "index_index_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_index_index_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/sse/ingestion/{job_id}": {
      "get": {
        "tags": [
          "indexing"
        ],
        "summary": "Stream Ingestion Progress",
        "description": "Server-Sent Events endpoint for ingestion progress.\nReturns events: queued, intake, image, embed, index, storage, completed, error.",
        "operationId": "stream_ingestion_progress_sse_ingestion__job_id__get",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/index/cancel/{job_id}": {
      "post": {
        "tags": [
          "indexing"
        ],
        "summary": "Cancel Ingestion",
        "description": "Cancel an ongoing ingestion job (best effort).\nNote: Cancellation is not fully implemented in the concurrent pipeline yet.",
        "operationId": "cancel_ingestion_index_cancel__job_id__post",
        "parameters": [
          {
            "name": "job_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Job Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/clear/qdrant": {
      "post": {
        "tags": [
          "maintenance"
        ],
        "summary": "Clear Qdrant",
        "operationId": "clear_qdrant_clear_qdrant_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/clear/minio": {
      "post": {
        "tags": [
          "maintenance"
        ],
        "summary": "Clear Minio",
        "operationId": "clear_minio_clear_minio_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/clear/all": {
      "post": {
        "tags": [
          "maintenance"
        ],
        "summary": "Clear All",
        "operationId": "clear_all_clear_all_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/status": {
      "get": {
        "tags": [
          "maintenance"
        ],
        "summary": "Get Status",
        "description": "Get the status of collection and bucket including statistics.",
        "operationId": "get_status_status_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/initialize": {
      "post": {
        "tags": [
          "maintenance"
        ],
        "summary": "Initialize",
        "description": "Initialize/create collection and bucket based on current configuration.",
        "operationId": "initialize_initialize_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/delete": {
      "delete": {
        "tags": [
          "maintenance"
        ],
        "summary": "Delete Collection And Bucket",
        "description": "Delete collection and bucket completely.",
        "operationId": "delete_collection_and_bucket_delete_delete",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/config/schema": {
      "get": {
        "tags": [
          "configuration"
        ],
        "summary": "Get Config Schema",
        "description": "Get the configuration schema with categories and settings.",
        "operationId": "get_config_schema_config_schema_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Get Config Schema Config Schema Get"
                }
              }
            }
          }
        }
      }
    },
    "/config/values": {
      "get": {
        "tags": [
          "configuration"
        ],
        "summary": "Get Config Values",
        "description": "Get current values for all configuration variables.",
        "operationId": "get_config_values_config_values_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "type": "string"
                  },
                  "type": "object",
                  "title": "Response Get Config Values Config Values Get"
                }
              }
            }
          }
        }
      }
    },
    "/config/update": {
      "post": {
        "tags": [
          "configuration"
        ],
        "summary": "Update Config",
        "description": "Update a configuration value at runtime.\n\nNote: This updates the runtime configuration immediately.\nTo persist changes across restarts, update your .env file manually.",
        "operationId": "update_config_config_update_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Update Config Config Update Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/config/reset": {
      "post": {
        "tags": [
          "configuration"
        ],
        "summary": "Reset Config",
        "description": "Reset all configuration to defaults from schema.\n\nNote: This only affects runtime values. Your .env file remains unchanged.",
        "operationId": "reset_config_config_reset_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": true,
                  "type": "object",
                  "title": "Response Reset Config Config Reset Post"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Body_index_index_post": {
        "properties": {
          "files": {
            "items": {
              "type": "string",
              "format": "binary"
            },
            "type": "array",
            "title": "Files"
          }
        },
        "type": "object",
        "required": [
          "files"
        ],
        "title": "Body_index_index_post"
      },
      "ConfigUpdate": {
        "properties": {
          "key": {
            "type": "string",
            "title": "Key",
            "description": "Environment variable name"
          },
          "value": {
            "type": "string",
            "title": "Value",
            "description": "New value"
          }
        },
        "type": "object",
        "required": [
          "key",
          "value"
        ],
        "title": "ConfigUpdate",
        "description": "Request model for updating configuration."
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "SearchItem": {
        "properties": {
          "image_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Image Url"
          },
          "label": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Label"
          },
          "payload": {
            "additionalProperties": true,
            "type": "object",
            "title": "Payload"
          },
          "score": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Score"
          }
        },
        "type": "object",
        "required": [
          "image_url",
          "label",
          "payload"
        ],
        "title": "SearchItem"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    }
  }
}